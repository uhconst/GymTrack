CREATE TABLE exerciseEntity(
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    created INTEGER NOT NULL,
    modified INTEGER NOT NULL,
    muscleId INTEGER NOT NULL,
    FOREIGN KEY (muscleId) REFERENCES muscleEntity(id)
);

CREATE TABLE muscleEntity(
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    colorHex INTEGER NOT NULL,
    created INTEGER NOT NULL,
    modified INTEGER NOT NULL
);

CREATE TABLE weightsEntity(
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    weight REAL NOT NULL,
    unit TEXT NOT NULL,
    created INTEGER NOT NULL,
    exerciseId INTEGER,
    FOREIGN KEY (exerciseId) REFERENCES exerciseEntity(id)
);

CREATE TABLE exerciseWeightBridgeEntity(
    exerciseId INTEGER NOT NULL PRIMARY KEY,
    weightId INTEGER NOT NULL,
    FOREIGN KEY (exerciseId) REFERENCES exerciseEntity(id),
    FOREIGN KEY (weightId) REFERENCES weightsEntity(id)
);

insertExercise:
INSERT OR REPLACE
INTO exerciseEntity(
    id,
    name,
    created,
    modified,
    muscleId
) VALUES(?, ?, ?, ?, ?);


insertWeight:
INSERT OR REPLACE
INTO weightsEntity(
    id,
    weight,
    unit,
    created,
   exerciseId
) VALUES(?, ?, ?, ?, ?);

insertMuscle:
INSERT OR REPLACE
INTO muscleEntity(
    id,
    name,
    description,
    colorHex,
    created,
    modified
) VALUES(?, ?, ?, ?, ?, ?);

insertExerciseWeightBridge:
INSERT OR REPLACE
INTO exerciseWeightBridgeEntity(
    exerciseId,
    weightId
) VALUES(?, ?);

getAllExercises:
SELECT *
FROM exerciseEntity
INNER JOIN muscleEntity
INNER JOIN exerciseWeightBridgeEntity
INNER JOIN weightsEntity
WHERE exerciseEntity.muscleId = muscleEntity.id
AND exerciseEntity.id = exerciseWeightBridgeEntity.exerciseId
AND weightsEntity.id = exerciseWeightBridgeEntity.weightId;

getExerciseById:
SELECT *
FROM exerciseEntity
INNER JOIN muscleEntity
INNER JOIN exerciseWeightBridgeEntity
INNER JOIN weightsEntity
WHERE exerciseEntity.id = ?
AND exerciseEntity.muscleId = muscleEntity.id
AND exerciseEntity.id = exerciseWeightBridgeEntity.exerciseId
AND weightsEntity.id = exerciseWeightBridgeEntity.weightId;

deleteExerciseById:
DELETE FROM exerciseEntity
WHERE id = ?;

getAllMuscles:
SELECT *
FROM muscleEntity;

getMuscleById:
SELECT *
FROM muscleEntity
WHERE id = ?;

deleteMuscleById:
DELETE FROM muscleEntity
WHERE id = ?;

lastInsertRowId:
SELECT last_insert_rowid();